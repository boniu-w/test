package wg.application.design.adapter;

/************************************************************************
 * author: wg
 * description: 适配器模式, 重点在于 复用 原来的接口
 * 适配器模式是一种常用的设计模式，它的主要作用是将一个类的接口转换成客户端所期望的另一种接口，从而使原本由于接口不兼容而不能一起工作的类可以在一起工作。
 *
 * 适配器模式的应用非常广泛，下面列举几个典型的应用场景：
 *
 * 1. 软件系统升级时，新系统需要与旧系统的接口进行兼容，就可以使用适配器模式来实现兼容。
 * 2. 在开发中，如果需要重用一些现有的类，但是这些类的接口与当前的系统不兼容，也可以使用适配器模式来实现接口兼容。
 * 3. 在开发中，可能需要使用一些第三方库或者服务，而这些库或服务的接口与我们的系统接口不一致，这时候可以使用适配器模式来实现接口转换。
 * 4. 在设计模式中，常常使用适配器模式将一些设计模式的接口进行兼容，例如迭代器模式和组合模式等。
 *
 * 总之，适配器模式是一种非常常用的设计模式，它可以帮助我们解决接口不兼容的问题，使得不同的类可以协同工作，提高系统的灵活性和扩展性。
 * createTime: 15:34 2023/4/3
 * updateTime: 15:34 2023/4/3
 ************************************************************************/
public class Main {


    /************************************************************************
     * @author: wg
     * @description: 现有旧的类 Adaptee.specificRequest 方法, 想调用它, 但新的需求要对它进行改进, 那么, 自定义个新的接口 Target, 参数, 和 返回值
     * 都可以不同, 在Adapter里 进行改进
     * @params:
     * @return:
     * @createTime: 15:23  2023/9/21
     * @updateTime: 15:23  2023/9/21
     ************************************************************************/
    public static void main(String[] args) {
        Target target = new Adapter(new Adaptee());
        int i = target.specificRequest("");
        System.out.println("i = " + i);
    }
}
