{
    "contexts":
    {
        "application":
        {
            "positiveMatches":
            {
                "MybatisAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.apache.ibatis.session.SqlSessionFactory', 'org.mybatis.spring.SqlSessionFactoryBean'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource'"
                    }
                ],
                "MybatisAutoConfiguration#sqlSessionFactory":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.apache.ibatis.session.SqlSessionFactory; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MybatisAutoConfiguration#sqlSessionTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.mybatis.spring.SqlSessionTemplate; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MybatisLanguageDriverAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.apache.ibatis.scripting.LanguageDriver'"
                    }
                ],
                "AuditAutoConfiguration#auditListener":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans"
                    }
                ],
                "AuditAutoConfiguration.AuditEventRepositoryConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans"
                    }
                ],
                "AuditEventsEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.auditevents.enabled found so using endpoint default"
                    }
                ],
                "AuditEventsEndpointAutoConfiguration#auditEventsEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventsEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "BeansEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.beans.enabled found so using endpoint default"
                    }
                ],
                "BeansEndpointAutoConfiguration#beansEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "CachesEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
                    },
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.caches.enabled found so using endpoint default"
                    }
                ],
                "CachesEndpointAutoConfiguration#cachesEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "CachesEndpointAutoConfiguration#cachesEndpointWebExtension":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ConditionsReportEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.conditions.enabled found so using endpoint default"
                    }
                ],
                "ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans"
                    }
                ],
                "ConfigurationPropertiesReportEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.configprops.enabled found so using endpoint default"
                    }
                ],
                "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans"
                    }
                ],
                "EndpointAutoConfiguration#endpointOperationParameterMapper":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JmxEndpointAutoConfiguration#jmxMBeanExporter":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a primary bean from beans 'mbeanServer'"
                    }
                ],
                "ServletEndpointManagementContextConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                    }
                ],
                "WebEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "@ConditionalOnWebApplication (required) found 'session' scope"
                    }
                ],
                "WebEndpointAutoConfiguration#controllerEndpointDiscoverer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebEndpointAutoConfiguration#endpointMediaTypes":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebEndpointAutoConfiguration#pathMappedEndpoints":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebEndpointAutoConfiguration#webEndpointDiscoverer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebEndpointAutoConfiguration.WebEndpointServletConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebMvcEndpointManagementContextConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet'"
                    }
                ],
                "WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
                    }
                ],
                "EnvironmentEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default"
                    }
                ],
                "EnvironmentEndpointAutoConfiguration#environmentEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthEndpointConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint found property management.endpoint.health.enabled with value true"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) found a primary bean from beans 'healthIndicatorRegistry'"
                    }
                ],
                "HealthEndpointConfiguration#healthEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthEndpointWebExtensionConfiguration#createHealthStatusHttpMapper":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthStatusHttpMapper; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthEndpointWebExtensionConfiguration#healthWebEndpointResponseMapper":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthWebEndpointResponseMapper; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint found property management.endpoint.health.enabled with value true"
                    }
                ],
                "HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration#healthEndpointWebExtension":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthIndicatorAutoConfiguration#healthAggregator":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthIndicatorAutoConfiguration#healthIndicatorRegistry":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HealthIndicatorAutoConfiguration.ReactiveHealthIndicatorConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Flux'"
                    }
                ],
                "HealthIndicatorAutoConfiguration.ReactiveHealthIndicatorConfiguration#reactiveHealthIndicatorRegistry":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry; SearchStrategy: all) did not find any beans"
                    }
                ],
                "InfoContributorAutoConfiguration#envInfoContributor":
                [
                    {
                        "condition": "OnEnabledInfoContributorCondition",
                        "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
                    }
                ],
                "InfoEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.info.enabled found so using endpoint default"
                    }
                ],
                "InfoEndpointAutoConfiguration#infoEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourceHealthIndicatorAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource'"
                    },
                    {
                        "condition": "OnEnabledHealthIndicatorCondition",
                        "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) found bean 'dataSource'"
                    }
                ],
                "DataSourceHealthIndicatorAutoConfiguration#dbHealthIndicator":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: dbHealthIndicator; SearchStrategy: all) did not find any beans"
                    }
                ],
                "LoggersEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.loggers.enabled found so using endpoint default"
                    }
                ],
                "LoggersEndpointAutoConfiguration#loggersEndpoint":
                [
                    {
                        "condition": "LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition",
                        "message": "Logging System enabled"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HeapDumpWebEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.heapdump.enabled found so using endpoint default"
                    }
                ],
                "HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ThreadDumpEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.threaddump.enabled found so using endpoint default"
                    }
                ],
                "ThreadDumpEndpointAutoConfiguration#dumpEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "CompositeMeterRegistryAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry'"
                    }
                ],
                "JvmMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.binders.jvm.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
                    }
                ],
                "JvmMetricsAutoConfiguration#classLoaderMetrics":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JvmMetricsAutoConfiguration#jvmGcMetrics":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JvmMetricsAutoConfiguration#jvmMemoryMetrics":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JvmMetricsAutoConfiguration#jvmThreadMetrics":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "LogbackMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.binders.logback.enabled) matched"
                    },
                    {
                        "condition": "LogbackMetricsAutoConfiguration.LogbackLoggingCondition",
                        "message": "LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
                    }
                ],
                "LogbackMetricsAutoConfiguration#logbackMetrics":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
                    }
                ],
                "MetricsAutoConfiguration#micrometerClock":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MetricsEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
                    },
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.metrics.enabled found so using endpoint default"
                    }
                ],
                "MetricsEndpointAutoConfiguration#metricsEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SystemMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
                    }
                ],
                "SystemMetricsAutoConfiguration#fileDescriptorMetrics":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.binders.files.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SystemMetricsAutoConfiguration#processorMetrics":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.binders.processor.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SystemMetricsAutoConfiguration#uptimeMetrics":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.binders.uptime.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans"
                    }
                ],
                "CacheMeterBinderProvidersConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder'"
                    }
                ],
                "CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.cache.caffeine.CaffeineCache', 'com.github.benmanes.caffeine.cache.Cache'"
                    }
                ],
                "CacheMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) found bean 'cacheManager'"
                    }
                ],
                "CacheMetricsRegistrarConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'caffeineCacheMeterBinderProvider', 'simpleMeterRegistry'"
                    }
                ],
                "SimpleMetricsExportAutoConfiguration":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.metrics.export.simple.enabled=true) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SimpleMetricsExportAutoConfiguration#simpleConfig":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourcePoolMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'simpleMeterRegistry', 'dataSource'"
                    }
                ],
                "DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider; SearchStrategy: all) found bean 'hikariPoolDataSourceMetadataProvider'"
                    }
                ],
                "DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource'"
                    }
                ],
                "HttpClientMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
                    }
                ],
                "RestTemplateMetricsConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
                    }
                ],
                "RestTemplateMetricsConfiguration#restTemplateTagConfigurer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebMvcMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
                    }
                ],
                "WebMvcMetricsAutoConfiguration#webMvcTagsProvider":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TomcatMetricsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "@ConditionalOnWebApplication (required) found 'session' scope"
                    }
                ],
                "TomcatMetricsAutoConfiguration#tomcatMetricsBinder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisHealthIndicatorAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
                    },
                    {
                        "condition": "OnEnabledHealthIndicatorCondition",
                        "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found bean 'redisConnectionFactory'"
                    }
                ],
                "RedisReactiveHealthIndicatorAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory', 'reactor.core.publisher.Flux'"
                    },
                    {
                        "condition": "OnEnabledHealthIndicatorCondition",
                        "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.ReactiveRedisConnectionFactory; SearchStrategy: all) found bean 'redisConnectionFactory'"
                    }
                ],
                "RedisReactiveHealthIndicatorAutoConfiguration#redisHealthIndicator":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: redisHealthIndicator; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ScheduledTasksEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.scheduledtasks.enabled found so using endpoint default"
                    }
                ],
                "ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DiskSpaceHealthIndicatorAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledHealthIndicatorCondition",
                        "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                    }
                ],
                "DiskSpaceHealthIndicatorAutoConfiguration#diskSpaceHealthIndicator":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HttpTraceAutoConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "@ConditionalOnWebApplication (required) found 'session' scope"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (management.trace.http.enabled) matched"
                    }
                ],
                "HttpTraceAutoConfiguration#httpExchangeTracer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpExchangeTracer; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HttpTraceAutoConfiguration#traceRepository":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HttpTraceAutoConfiguration.ServletTraceFilterConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "HttpTraceAutoConfiguration.ServletTraceFilterConfiguration#httpTraceFilter":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter; SearchStrategy: all) did not find any beans"
                    }
                ],
                "HttpTraceEndpointAutoConfiguration":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.httptrace.enabled found so using endpoint default"
                    }
                ],
                "HttpTraceEndpointAutoConfiguration#httpTraceEndpoint":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) found bean 'traceRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceEndpoint; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MappingsEndpointAutoConfiguration#mappingsEndpoint":
                [
                    {
                        "condition": "OnEnabledEndpointCondition",
                        "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.mappings.enabled found so using endpoint default"
                    }
                ],
                "MappingsEndpointAutoConfiguration.ServletWebConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
                    }
                ],
                "ManagementContextAutoConfiguration.SameManagementContextConfiguration":
                [
                    {
                        "condition": "OnManagementPortCondition",
                        "message": "Management Port actual port type (SAME) matched required type"
                    }
                ],
                "ServletManagementContextAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'javax.servlet.Servlet'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "AopAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.context.annotation.EnableAspectJAutoProxy', 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice', 'org.aspectj.weaver.AnnotatedElement'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.aop.auto=true) matched"
                    }
                ],
                "AopAutoConfiguration.CglibAutoProxyConfiguration":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
                    }
                ],
                "CacheAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) found bean 'cacheInterceptor'; @ConditionalOnMissingBean (names: cacheResolver; types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans"
                    }
                ],
                "CacheAutoConfiguration#cacheManagerCustomizers":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisCacheConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
                    },
                    {
                        "condition": "CacheCondition",
                        "message": "Cache org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration REDIS cache type"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found bean 'redisConnectionFactory'; @ConditionalOnMissingBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MessageSourceAutoConfiguration":
                [
                    {
                        "condition": "MessageSourceAutoConfiguration.ResourceBundleCondition",
                        "message": "ResourceBundle found bundle URL [file:/H:/java-project/wg/oldversion-05242023/target/classes/i18n/error_message.properties]"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: current) did not find any beans"
                    }
                ],
                "PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans"
                    }
                ],
                "PersistenceExceptionTranslationAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'"
                    }
                ],
                "PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JedisConnectionConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.apache.commons.pool2.impl.GenericObjectPool', 'org.springframework.data.redis.connection.jedis.JedisConnection', 'redis.clients.jedis.Jedis'"
                    }
                ],
                "LettuceConnectionConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'io.lettuce.core.RedisClient'"
                    }
                ],
                "LettuceConnectionConfiguration#lettuceClientResources":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: io.lettuce.core.resource.ClientResources; SearchStrategy: all) did not find any beans"
                    }
                ],
                "LettuceConnectionConfiguration#redisConnectionFactory":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.data.redis.core.RedisOperations'"
                    }
                ],
                "RedisAutoConfiguration#redisTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: redisTemplate; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisAutoConfiguration#stringRedisTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.data.redis.core.StringRedisTemplate; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisReactiveAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory', 'org.springframework.data.redis.core.ReactiveRedisTemplate', 'reactor.core.publisher.Flux'"
                    }
                ],
                "RedisReactiveAutoConfiguration#reactiveRedisTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.ReactiveRedisConnectionFactory; SearchStrategy: all) found bean 'redisConnectionFactory'; @ConditionalOnMissingBean (names: reactiveRedisTemplate; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RedisRepositoriesAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.data.redis.repositories.enabled=true) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found bean 'redisConnectionFactory'; @ConditionalOnMissingBean (types: org.springframework.data.redis.repository.support.RedisRepositoryFactoryBean; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SpringDataWebAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.data.web.PageableHandlerMethodArgumentResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SpringDataWebAutoConfiguration#pageableCustomizer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans"
                    }
                ],
                "SpringDataWebAutoConfiguration#sortCustomizer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans"
                    }
                ],
                "FreeMarkerAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'freemarker.template.Configuration', 'org.springframework.ui.freemarker.FreeMarkerConfigurationFactory'"
                    }
                ],
                "FreeMarkerServletWebConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "FreeMarkerServletWebConfiguration#freeMarkerConfigurer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.freemarker.FreeMarkerConfig; SearchStrategy: all) did not find any beans"
                    }
                ],
                "FreeMarkerServletWebConfiguration#freeMarkerViewResolver":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.freemarker.enabled) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: freeMarkerViewResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "GsonAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.google.gson.Gson'"
                    }
                ],
                "GsonAutoConfiguration#gson":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: com.google.gson.Gson; SearchStrategy: all) did not find any beans"
                    }
                ],
                "GsonAutoConfiguration#gsonBuilder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: com.google.gson.GsonBuilder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "GsonHttpMessageConvertersConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.google.gson.Gson'"
                    }
                ],
                "HttpMessageConvertersAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'"
                    }
                ],
                "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'"
                    }
                ],
                "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jackson) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
                    }
                ],
                "CodecsAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'"
                    }
                ],
                "CodecsAutoConfiguration.JacksonCodecConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
                    }
                ],
                "CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
                    }
                ],
                "JacksonAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
                    }
                ],
                "JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
                    }
                ],
                "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
                    }
                ],
                "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JacksonAutoConfiguration.JacksonObjectMapperConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
                    }
                ],
                "JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JacksonAutoConfiguration.ParameterNamesModuleConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'"
                    }
                ],
                "JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourceAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
                    }
                ],
                "DataSourceAutoConfiguration.PooledDataSourceConfiguration":
                [
                    {
                        "condition": "DataSourceAutoConfiguration.PooledDataSourceCondition",
                        "message": "AnyNestedCondition 1 matched 1 did not; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.PooledDataSourceAvailable PooledDataSource found supported DataSource; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.ExplicitType @ConditionalOnProperty (spring.datasource.type) did not find property 'type'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: javax.sql.DataSource,javax.sql.XADataSource; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourceConfiguration.Hikari":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.datasource.type=com.zaxxer.hikari.HikariDataSource) matched"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourceJmxConfiguration":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
                    }
                ],
                "DataSourceJmxConfiguration.Hikari":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource'"
                    }
                ],
                "DataSourceTransactionManagerAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.PlatformTransactionManager'"
                    }
                ],
                "DataSourceTransactionManagerAutoConfiguration.DataSourceTransactionManagerConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource'"
                    }
                ],
                "DataSourceTransactionManagerAutoConfiguration.DataSourceTransactionManagerConfiguration#transactionManager":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JdbcTemplateAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.core.JdbcTemplate'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource'"
                    }
                ],
                "JdbcTemplateAutoConfiguration.JdbcTemplateConfiguration#jdbcTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.jdbc.core.JdbcOperations; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JdbcTemplateAutoConfiguration.NamedParameterJdbcTemplateConfiguration#namedParameterJdbcTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: org.springframework.jdbc.core.JdbcTemplate; SearchStrategy: all) found a primary bean from beans 'jdbcTemplate'; @ConditionalOnMissingBean (types: org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations; SearchStrategy: all) did not find any beans"
                    }
                ],
                "DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource'"
                    }
                ],
                "JmxAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
                    }
                ],
                "JmxAutoConfiguration#mbeanExporter":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans"
                    }
                ],
                "JmxAutoConfiguration#mbeanServer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans"
                    }
                ],
                "JmxAutoConfiguration#objectNamingStrategy":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans"
                    }
                ],
                "ReactorCoreAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'reactor.core.publisher.Mono', 'reactor.core.publisher.Flux'"
                    }
                ],
                "TaskExecutionAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor'"
                    }
                ],
                "TaskExecutionAutoConfiguration#applicationTaskExecutor":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TaskExecutionAutoConfiguration#taskExecutorBuilder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TaskSchedulingAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler'"
                    }
                ],
                "TaskSchedulingAutoConfiguration#taskScheduler":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) found bean 'org.springframework.context.annotation.internalScheduledAnnotationProcessor'; @ConditionalOnMissingBean (types: org.springframework.scheduling.annotation.SchedulingConfigurer,org.springframework.scheduling.TaskScheduler,java.util.concurrent.ScheduledExecutorService; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TaskSchedulingAutoConfiguration#taskSchedulerBuilder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TransactionAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager'"
                    }
                ],
                "TransactionAutoConfiguration#platformTransactionManagerCustomizers":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TransactionAutoConfiguration.EnableTransactionManagementConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans"
                    }
                ],
                "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
                    }
                ],
                "TransactionAutoConfiguration.TransactionTemplateConfiguration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) found a primary bean from beans 'transactionManager'"
                    }
                ],
                "TransactionAutoConfiguration.TransactionTemplateConfiguration#transactionTemplate":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.transaction.support.TransactionTemplate; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ValidationAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator'"
                    },
                    {
                        "condition": "OnResourceCondition",
                        "message": "@ConditionalOnResource found location classpath:META-INF/services/javax.validation.spi.ValidationProvider"
                    }
                ],
                "ValidationAutoConfiguration#defaultValidator":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: javax.validation.Validator; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ValidationAutoConfiguration#methodValidationPostProcessor":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: all) did not find any beans"
                    }
                ],
                "RestTemplateAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
                    }
                ],
                "RestTemplateAutoConfiguration#restTemplateBuilder":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans"
                    }
                ],
                "EmbeddedWebServerFactoryCustomizerAutoConfiguration":
                [
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "@ConditionalOnWebApplication (required) found 'session' scope"
                    }
                ],
                "EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
                    }
                ],
                "DispatcherServletAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "DispatcherServletAutoConfiguration.DispatcherServletConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'"
                    },
                    {
                        "condition": "DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition",
                        "message": "Default DispatcherServlet did not find dispatcher servlet beans"
                    }
                ],
                "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'"
                    },
                    {
                        "condition": "DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition",
                        "message": "DispatcherServlet Registration did not find servlet registration bean"
                    }
                ],
                "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (names: dispatcherServlet; types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
                    }
                ],
                "HttpEncodingAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.http.encoding.enabled) matched"
                    }
                ],
                "HttpEncodingAutoConfiguration#characterEncodingFilter":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MultipartAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    },
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (spring.servlet.multipart.enabled) matched"
                    }
                ],
                "MultipartAutoConfiguration#multipartConfigElement":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement,org.springframework.web.multipart.commons.CommonsMultipartResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "MultipartAutoConfiguration#multipartResolver":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ServletWebServerFactoryAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRequest'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat'"
                    }
                ],
                "ServletWebServerFactoryConfiguration.EmbeddedTomcat":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
                    },
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans"
                    }
                ],
                "ErrorMvcAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "ErrorMvcAutoConfiguration#basicErrorController":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans"
                    }
                ],
                "ErrorMvcAutoConfiguration#errorAttributes":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans"
                    }
                ],
                "ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration":
                [
                    {
                        "condition": "OnPropertyCondition",
                        "message": "@ConditionalOnProperty (server.error.whitelabel.enabled) matched"
                    },
                    {
                        "condition": "ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition",
                        "message": "ErrorTemplate Missing did not find error template view"
                    }
                ],
                "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans"
                    }
                ],
                "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans"
                    }
                ],
                "WebSocketServletAutoConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer'"
                    },
                    {
                        "condition": "OnWebApplicationCondition",
                        "message": "found 'session' scope"
                    }
                ],
                "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration":
                [
                    {
                        "condition": "OnClassCondition",
                        "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci'"
                    }
                ],
                "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer":
                [
                    {
                        "condition": "OnBeanCondition",
                        "message": "@ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans"
                    }
                ]
            },
            "negativeMatches":
            {
                "MybatisAutoConfiguration.MapperScannerRegistrarNotFoundConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.mybatis.spring.mapper.MapperFactoryBean,org.mybatis.spring.mapper.MapperScannerConfigurer; SearchStrategy: all) found beans of type 'org.mybatis.spring.mapper.MapperScannerConfigurer' wg.application.TestApplication#MapperScannerRegistrar#0"
                        }
                    ],
                    "matched":
                    []
                },
                "MybatisLanguageDriverAutoConfiguration.FreeMarkerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'org.mybatis.scripting.freemarker.FreeMarkerLanguageDriver', 'org.mybatis.scripting.freemarker.FreeMarkerLanguageDriverConfig'"
                        }
                    ],
                    "matched":
                    []
                },
                "MybatisLanguageDriverAutoConfiguration.LegacyFreeMarkerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.mybatis.scripting.freemarker.FreeMarkerLanguageDriver'"
                        }
                    ],
                    "matched":
                    []
                },
                "MybatisLanguageDriverAutoConfiguration.LegacyVelocityConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.mybatis.scripting.velocity.Driver'"
                        }
                    ],
                    "matched":
                    []
                },
                "MybatisLanguageDriverAutoConfiguration.ThymeleafConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.mybatis.scripting.thymeleaf.ThymeleafLanguageDriver'"
                        }
                    ],
                    "matched":
                    []
                },
                "MybatisLanguageDriverAutoConfiguration.VelocityConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'org.mybatis.scripting.velocity.VelocityLanguageDriver', 'org.mybatis.scripting.velocity.VelocityLanguageDriverConfig'"
                        }
                    ],
                    "matched":
                    []
                },
                "RabbitHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "AuditAutoConfiguration#authenticationAuditListener":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
                        }
                    ],
                    "matched":
                    []
                },
                "AuditAutoConfiguration#authorizationAuditListener":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraReactiveHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveCloudFoundryActuatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "CloudFoundryActuatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnCloudPlatformCondition",
                            "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
                        },
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "found 'session' scope"
                        },
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (management.cloudfoundry.enabled) matched"
                        }
                    ]
                },
                "ShutdownEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnEnabledEndpointCondition",
                            "message": "@ConditionalOnEnabledEndpoint no property management.endpoint.shutdown.enabled found so using endpoint default"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseReactiveHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticSearchClientHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticSearchJestHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.searchbox.client.JestClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticSearchRestHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
                        }
                    ],
                    "matched":
                    []
                },
                "JerseyWebEndpointManagementContextConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebFluxEndpointManagementContextConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
                        }
                    ],
                    "matched":
                    []
                },
                "FlywayEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
                        }
                    ],
                    "matched":
                    []
                },
                "HealthEndpointWebExtensionConfiguration.ReactiveWebHealthConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "HealthIndicatorAutoConfiguration#applicationHealthIndicator":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicator,org.springframework.boot.actuate.health.ReactiveHealthIndicator; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.health.HealthIndicator' diskSpaceHealthIndicator, dbHealthIndicator and found beans of type 'org.springframework.boot.actuate.health.ReactiveHealthIndicator' redisHealthIndicator"
                        }
                    ],
                    "matched":
                    []
                },
                "InfluxDbHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
                        }
                    ],
                    "matched":
                    []
                },
                "InfoContributorAutoConfiguration#buildInfoContributor":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnEnabledInfoContributorCondition",
                            "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
                        }
                    ]
                },
                "InfoContributorAutoConfiguration#gitInfoContributor":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnEnabledInfoContributorCondition",
                            "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
                        }
                    ]
                },
                "IntegrationGraphEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.graph.IntegrationGraphServer'"
                        }
                    ],
                    "matched":
                    []
                },
                "JmsHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "JolokiaEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet'"
                        }
                    ],
                    "matched":
                    []
                },
                "LdapHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'"
                        }
                    ],
                    "matched":
                    []
                },
                "LiquibaseEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
                        }
                    ],
                    "matched":
                    []
                },
                "LogFileWebEndpointAutoConfiguration#logFileWebEndpoint":
                {
                    "notMatched":
                    [
                        {
                            "condition": "LogFileWebEndpointAutoConfiguration.LogFileCondition",
                            "message": "Log File did not find logging file"
                        }
                    ],
                    "matched":
                    []
                },
                "MailHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnBean (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) did not find any beans of type org.springframework.mail.javamail.JavaMailSenderImpl"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass found required class 'org.springframework.mail.javamail.JavaMailSenderImpl'"
                        },
                        {
                            "condition": "OnEnabledHealthIndicatorCondition",
                            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                        }
                    ]
                },
                "CompositeMeterRegistryConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition",
                            "message": "NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a primary bean from beans 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
                        }
                    ],
                    "matched":
                    []
                },
                "KafkaMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.kafka.clients.consumer.KafkaConsumer'"
                        }
                    ],
                    "matched":
                    []
                },
                "Log4J2MetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext'"
                        }
                    ],
                    "matched":
                    []
                },
                "NoOpMeterRegistryConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
                        }
                    ],
                    "matched":
                    []
                },
                "RabbitMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.ConnectionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "CacheMeterBinderProvidersConfiguration.EhCache2CacheMeterBinderProviderConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'net.sf.ehcache.Ehcache'"
                        }
                    ],
                    "matched":
                    []
                },
                "CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast'"
                        }
                    ],
                    "matched":
                    []
                },
                "CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.cache.CacheManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "AppOpticsMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "AtlasMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "DatadogMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "DynatraceMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "GangliaMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "GraphiteMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "HumioMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "InfluxMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "JmxMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "KairosMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "NewRelicMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "PrometheusMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "SignalFxMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "StatsdMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "WavefrontMetricsExportAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.wavefront.WavefrontMeterRegistry'"
                        }
                    ],
                    "matched":
                    []
                },
                "JerseyServerMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.micrometer.jersey2.server.MetricsApplicationEventListener'"
                        }
                    ],
                    "matched":
                    []
                },
                "HibernateMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebClientMetricsConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "JettyMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebFluxMetricsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoReactiveHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.ReactiveMongoTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "Neo4jHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "RedisHealthIndicatorAutoConfiguration#redisHealthIndicator":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (names: redisHealthIndicator; SearchStrategy: all) found beans named redisHealthIndicator"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveManagementWebSecurityAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
                        }
                    ],
                    "matched":
                    []
                },
                "ManagementWebSecurityAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter'"
                        }
                    ],
                    "matched":
                    []
                },
                "SessionsEndpointAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository'"
                        }
                    ],
                    "matched":
                    []
                },
                "SolrHealthIndicatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "HttpTraceAutoConfiguration.ReactiveTraceFilterConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "JerseySameManagementContextConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
                        }
                    ],
                    "matched":
                    []
                },
                "MappingsEndpointAutoConfiguration.ReactiveWebConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveManagementContextAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "ManagementContextAutoConfiguration.DifferentManagementContextConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnManagementPortCondition",
                            "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
                        }
                    ],
                    "matched":
                    []
                },
                "ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header'"
                        }
                    ],
                    "matched":
                    []
                },
                "SpringApplicationAdminJmxAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.application.admin.enabled=true) did not find property 'enabled'"
                        }
                    ],
                    "matched":
                    []
                },
                "RabbitAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel'"
                        }
                    ],
                    "matched":
                    []
                },
                "AopAutoConfiguration.JdkDynamicAutoProxyConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class'"
                        }
                    ],
                    "matched":
                    []
                },
                "BatchAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher'"
                        }
                    ],
                    "matched":
                    []
                },
                "CacheAutoConfiguration.CacheManagerJpaDependencyConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
                        }
                    ],
                    "matched":
                    []
                },
                "CaffeineCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "CacheCondition",
                            "message": "Cache org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration unknown cache type"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass found required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager'"
                        }
                    ]
                },
                "CouchbaseCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'com.couchbase.client.spring.cache.CouchbaseCacheManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "EhCacheCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'net.sf.ehcache.Cache'"
                        }
                    ],
                    "matched":
                    []
                },
                "GenericCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "CacheCondition",
                            "message": "Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration unknown cache type"
                        }
                    ],
                    "matched":
                    []
                },
                "HazelcastCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "InfinispanCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringEmbeddedCacheManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "JCacheCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.cache.Caching'"
                        }
                    ],
                    "matched":
                    []
                },
                "NoOpCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "CacheCondition",
                            "message": "Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration unknown cache type"
                        }
                    ],
                    "matched":
                    []
                },
                "SimpleCacheConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "CacheCondition",
                            "message": "Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration unknown cache type"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CloudServiceConnectorsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.cloud.config.java.CloudScanConfiguration'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraReactiveDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraReactiveRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession'"
                        }
                    ],
                    "matched":
                    []
                },
                "CassandraRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Session'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseReactiveDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseReactiveRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
                        }
                    ],
                    "matched":
                    []
                },
                "CouchbaseRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticsearchAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticsearchDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'"
                        }
                    ],
                    "matched":
                    []
                },
                "ElasticsearchRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'"
                        }
                    ],
                    "matched":
                    []
                },
                "JdbcRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.JdbcConfiguration'"
                        }
                    ],
                    "matched":
                    []
                },
                "JpaRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'"
                        }
                    ],
                    "matched":
                    []
                },
                "LdapRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoReactiveDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoReactiveRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "Neo4jDataAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "Neo4jRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.neo4j.ogm.session.Neo4jSession'"
                        }
                    ],
                    "matched":
                    []
                },
                "JedisConnectionConfiguration#redisConnectionFactory":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) found beans of type 'org.springframework.data.redis.connection.RedisConnectionFactory' redisConnectionFactory"
                        }
                    ],
                    "matched":
                    []
                },
                "RepositoryRestMvcAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'"
                        }
                    ],
                    "matched":
                    []
                },
                "SolrRepositoriesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "JestAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.searchbox.client.JestClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "RestClientAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "FlywayAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
                        }
                    ],
                    "matched":
                    []
                },
                "FreeMarkerNonWebConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication found 'session' scope and did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "FreeMarkerReactiveWebConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "FreeMarkerServletWebConfiguration#resourceUrlEncodingFilter":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnEnabledResourceChainCondition",
                            "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
                        }
                    ],
                    "matched":
                    []
                },
                "GroovyTemplateAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'"
                        }
                    ],
                    "matched":
                    []
                },
                "H2ConsoleAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet'"
                        }
                    ],
                    "matched":
                    []
                },
                "HypermediaAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.hateoas.Resource'"
                        }
                    ],
                    "matched":
                    []
                },
                "HazelcastAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
                        }
                    ],
                    "matched":
                    []
                },
                "HazelcastJpaDependencyAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
                        }
                    ],
                    "matched":
                    []
                },
                "GsonHttpMessageConvertersConfiguration.GsonHttpMessageConverterConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition",
                            "message": "AnyNestedCondition 0 matched 2 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.JacksonJsonbUnavailable NoneNestedConditions 1 matched 1 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JsonbPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jsonb) did not find property 'spring.http.converters.preferred-json-mapper'; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JacksonAvailable @ConditionalOnBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) found bean 'jackson2HttpMessageConverter'; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.GsonPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=gson) did not find property 'spring.http.converters.preferred-json-mapper'"
                        }
                    ],
                    "matched":
                    []
                },
                "HttpMessageConvertersAutoConfiguration#messageConverters":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) found beans of type 'org.springframework.boot.autoconfigure.http.HttpMessageConverters' fastJsonHttpMessageConverters"
                        }
                    ],
                    "matched":
                    []
                },
                "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) found beans of type 'org.springframework.http.converter.json.MappingJackson2HttpMessageConverter' jackson2HttpMessageConverter"
                        }
                    ],
                    "matched":
                    []
                },
                "JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'"
                        }
                    ],
                    "matched":
                    []
                },
                "JsonbHttpMessageConvertersConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'"
                        }
                    ],
                    "matched":
                    []
                },
                "InfluxDbAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
                        }
                    ],
                    "matched":
                    []
                },
                "ProjectInfoAutoConfiguration#buildProperties":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnResourceCondition",
                            "message": "@ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}'"
                        }
                    ],
                    "matched":
                    []
                },
                "ProjectInfoAutoConfiguration#gitProperties":
                {
                    "notMatched":
                    [
                        {
                            "condition": "ProjectInfoAutoConfiguration.GitResourceAvailableCondition",
                            "message": "GitResource did not find git info at classpath:git.properties"
                        }
                    ],
                    "matched":
                    []
                },
                "IntegrationAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration'"
                        }
                    ],
                    "matched":
                    []
                },
                "JacksonAutoConfiguration.JodaDateTimeJacksonConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'org.joda.time.DateTime', 'com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer', 'com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "DataSourceAutoConfiguration.EmbeddedDatabaseCondition",
                            "message": "EmbeddedDataSource found supported pooled data source"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourceConfiguration.Dbcp2":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourceConfiguration.Generic":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.datasource.type) did not find property 'spring.datasource.type'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourceConfiguration.Tomcat":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourceJmxConfiguration.TomcatDataSourceJmxConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSourceProxy'"
                        }
                    ],
                    "matched":
                    []
                },
                "JndiDataSourceAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.datasource.jndi-name) did not find property 'jndi-name'"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
                        }
                    ]
                },
                "XADataSourceAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.transaction.TransactionManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourcePoolMetadataProvidersConfiguration.CommonsDbcp2PoolDataSourceMetadataProviderConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource'"
                        }
                    ],
                    "matched":
                    []
                },
                "DataSourcePoolMetadataProvidersConfiguration.TomcatDataSourcePoolMetadataProviderConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource'"
                        }
                    ],
                    "matched":
                    []
                },
                "JerseyAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider'"
                        }
                    ],
                    "matched":
                    []
                },
                "JmsAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.jms.Message'"
                        }
                    ],
                    "matched":
                    []
                },
                "JndiConnectionFactoryAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "ActiveMQAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "ArtemisAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
                        }
                    ],
                    "matched":
                    []
                },
                "JooqAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.jooq.DSLContext'"
                        }
                    ],
                    "matched":
                    []
                },
                "JsonbAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'"
                        }
                    ],
                    "matched":
                    []
                },
                "KafkaAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "LdapAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'"
                        }
                    ],
                    "matched":
                    []
                },
                "EmbeddedLdapAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'"
                        }
                    ],
                    "matched":
                    []
                },
                "LiquibaseAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange'"
                        }
                    ],
                    "matched":
                    []
                },
                "MailSenderAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.mail.internet.MimeMessage'"
                        }
                    ],
                    "matched":
                    []
                },
                "MailSenderValidatorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "MongoReactiveAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "EmbeddedMongoAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "MustacheAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'"
                        }
                    ],
                    "matched":
                    []
                },
                "HibernateJpaAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.persistence.EntityManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "QuartzAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveOAuth2ClientAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
                        }
                    ],
                    "matched":
                    []
                },
                "OAuth2ClientAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveOAuth2ResourceServerAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
                        }
                    ],
                    "matched":
                    []
                },
                "OAuth2ResourceServerAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.jwt.JwtDecoder'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveSecurityAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveUserDetailsServiceAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "SecurityAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher'"
                        }
                    ],
                    "matched":
                    []
                },
                "SecurityFilterAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy'"
                        }
                    ],
                    "matched":
                    []
                },
                "SecurityRequestMatcherProviderAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher'"
                        }
                    ],
                    "matched":
                    []
                },
                "UserDetailsServiceAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager'"
                        }
                    ],
                    "matched":
                    []
                },
                "SendGridAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'"
                        }
                    ],
                    "matched":
                    []
                },
                "SessionAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.session.Session'"
                        }
                    ],
                    "matched":
                    []
                },
                "SolrAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "ThymeleafAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.thymeleaf.templatemode.TemplateMode'"
                        }
                    ],
                    "matched":
                    []
                },
                "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class'"
                        }
                    ],
                    "matched":
                    []
                },
                "JtaAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'javax.transaction.Transaction'"
                        }
                    ],
                    "matched":
                    []
                },
                "EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
                        }
                    ],
                    "matched":
                    []
                },
                "EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer'"
                        }
                    ],
                    "matched":
                    []
                },
                "EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
                        }
                    ],
                    "matched":
                    []
                },
                "HttpHandlerAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
                        }
                    ],
                    "matched":
                    []
                },
                "ReactiveWebServerFactoryAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "WebFluxAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
                        }
                    ],
                    "matched":
                    []
                },
                "ErrorWebFluxAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
                        }
                    ],
                    "matched":
                    []
                },
                "ClientHttpConnectorAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebClientAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
                        }
                    ],
                    "matched":
                    []
                },
                "DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver"
                        }
                    ],
                    "matched":
                    []
                },
                "ServletWebServerFactoryConfiguration.EmbeddedJetty":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
                        }
                    ],
                    "matched":
                    []
                },
                "ServletWebServerFactoryConfiguration.EmbeddedUndertow":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebMvcAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnBeanCondition",
                            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport' org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration, wgWebMvcConfiguration"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
                        },
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "found 'session' scope"
                        }
                    ]
                },
                "WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnEnabledResourceChainCondition",
                            "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
                        },
                        {
                            "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                            "message": "Ancestor org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration did not match"
                        }
                    ],
                    "matched":
                    []
                },
                "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                            "message": "Ancestor org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration did not match"
                        }
                    ],
                    "matched":
                    [
                        {
                            "condition": "OnPropertyCondition",
                            "message": "@ConditionalOnProperty (spring.mvc.favicon.enabled) matched"
                        }
                    ]
                },
                "WebServicesAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebServiceTemplateAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.client.core.WebServiceTemplate'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebSocketReactiveAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnWebApplicationCondition",
                            "message": "@ConditionalOnWebApplication did not find reactive web application classes"
                        }
                    ],
                    "matched":
                    []
                },
                "WebSocketMessagingAutoConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebSocketServletAutoConfiguration.JettyWebSocketConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer'"
                        }
                    ],
                    "matched":
                    []
                },
                "WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration":
                {
                    "notMatched":
                    [
                        {
                            "condition": "OnClassCondition",
                            "message": "@ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap'"
                        }
                    ],
                    "matched":
                    []
                }
            },
            "unconditionalClasses":
            [
                "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration",
                "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration",
                "org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration",
                "cn.hutool.extra.spring.SpringUtil",
                "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration"
            ]
        }
    }
}